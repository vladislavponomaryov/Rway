{"version":3,"file":"static/js/788.68264c47.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-kabzda-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wallpaper\":\"ProfileInfo_wallpaper__C9Pd+\",\"avatar\":\"ProfileInfo_avatar__pTRQT\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode,setEditMode] = useState(false);\r\n    let [status,setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const changeMode = () => {\r\n        setEditMode(!editMode);\r\n\r\n        if (editMode) {\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode ?\r\n                <span onDoubleClick={ changeMode }>{props.status || \"-------\"}</span>\r\n                :\r\n                <input type=\"text\" autoFocus={true} onBlur={ changeMode } value={status} onChange={onStatusChange} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/avatar.png\";\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src=\"https://i.pinimg.com/originals/60/1a/ac/601aacc648a45704f643b88f5d5c3f39.jpg\" alt=\"\"\r\n                 className={s.wallpaper}/>\r\n            <div>{ (profile.fullName && profile.fullName)}</div>\r\n            <div className={s.avatar}>\r\n                {profile.photos.large ? <img src={profile.photos.large} alt=\"User\"/> : <img src={userPhoto} alt=\"User\"/> }\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n            <div>{profile.aboutMe && profile.aboutMe}</div>\r\n            <div>{profile.lookingForAJobDescription && profile.lookingForAJobDescription}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ntsX1\",\"avatar\":\"Post_avatar__aB-0r\",\"like\":\"Post_like__i3AiQ\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.avatar}></div>\r\n            <p>{props.message}</p>\r\n            <div className={s.like}>Like {props.likeCount}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport Field from \"redux-form/lib/Field\";\r\nimport ReduxForm from \"redux-form/lib/reduxForm\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'New post'} name={'newPostBody'} component={Textarea} validate={[required,maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostReduxForm = ReduxForm({form:'profileAddPostForm'})(AddPostForm);\r\n\r\nconst MyPosts = (p) => {\r\n\r\n    let postElements = p.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />)\r\n\r\n    let addNewPost = (formData) => {\r\n        p.addPost(formData.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost} />\r\n            </div>\r\n            {postElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer store={props.store} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"../../hoc/withRouter\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let routUserId = this.props.match.params.userId; // match получает ID из страницы браузера через Router\r\n        let userId = (routUserId) ? routUserId : this.props.userId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n    render() {\r\n\r\n        if (!this.props.match.params.userId && !this.props.userId) return <Navigate to={'/login'}/>\r\n\r\n        return <Profile {...this.props}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    store: state.store,\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","changeMode","updateStatus","type","autoFocus","onBlur","value","onChange","e","currentTarget","onDoubleClick","profile","src","alt","className","s","fullName","photos","large","userPhoto","aboutMe","lookingForAJobDescription","Preloader","message","likeCount","maxLength10","maxLengthCreator","AddPostReduxForm","ReduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","p","postElements","posts","map","likesCount","id","formData","addPost","newPostBody","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","MyPosts","store","ProfileContainer","routUserId","this","match","params","userId","getUserProfile","getStatus","to","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}