{"version":3,"file":"static/js/489.60f7fe4f.chunk.js","mappings":"iQAQMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CA0BD,OA1BCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAAaC,KAAKC,MAAMC,MAAMC,OAAOC,OACrCA,EAAUL,GAA2BC,KAAKC,MAAMG,OACpDJ,KAAKC,MAAMI,eAAeD,GAC1BJ,KAAKC,MAAMK,UAAUF,EACxB,kCAED,WACIJ,KAAKO,gBACR,mCAED,SAAmBC,EAAWC,EAAWC,GACjCV,KAAKC,MAAMC,MAAMC,OAAOC,SAAWI,EAAUN,MAAMC,OAAOC,QAC1DJ,KAAKO,gBAEZ,uBAED,WAEI,OAAKP,KAAKC,MAAMC,MAAMC,OAAOC,QAAWJ,KAAKC,MAAMG,QAE5C,SAAC,KAAD,kBAAaJ,KAAKC,OAAlB,IACHU,SAAUX,KAAKC,MAAMC,MAAMC,OAAOC,WAH4B,SAAC,KAAD,CAAUQ,GAAI,UAKnF,OA1BCd,CAAyBe,EAAAA,WAqC/B,WAAeC,EAAAA,EAAAA,UACXC,EAAAA,EAAAA,UATkB,SAACC,GAAD,MAAY,CAC9BC,MAAOD,EAAMC,MACbC,QAASF,EAAMG,YAAYD,QAC3BE,OAAQJ,EAAMG,YAAYC,OAC1BhB,OAAQY,EAAMK,KAAKjB,OACnBkB,OAAQN,EAAMK,KAAKC,OALD,GASM,CAACjB,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAWiB,aAAAA,EAAAA,GAAcC,UAAAA,EAAAA,GAAWC,YAAAA,EAAAA,KAC7EC,EAAAA,EAFJ,CAGE5B,E","sources":["components/Profile/ProfileContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"../../hoc/withRouter\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let routUserId = this.props.match.params.userId; // match получает ID из страницы браузера через Router\r\n        let userId = (routUserId) ? routUserId : this.props.userId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.match.params.userId && !this.props.userId) return <Navigate to={'/login'}/>\r\n\r\n        return <Profile {...this.props}\r\n            isOwner={!this.props.match.params.userId}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    store: state.store,\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["ProfileContainer","routUserId","this","props","match","params","userId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","isOwner","to","React","compose","connect","state","store","profile","profilePage","status","auth","isAuth","updateStatus","savePhoto","saveProfile","withRouter"],"sourceRoot":""}